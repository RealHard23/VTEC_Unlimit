name: Build & Release Magisk Module

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from module.prop
        id: ver
        run: |
          MODULE_VERSION=$(grep '^version=' module.prop | cut -d'=' -f2)
          MODULE_VERSION_CODE=$(grep '^versionCode=' module.prop | cut -d'=' -f2)
          echo "MODULE_VERSION=$MODULE_VERSION"         >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$MODULE_VERSION_CODE" >> $GITHUB_ENV
          echo "Detected version=$MODULE_VERSION (code=$MODULE_VERSION_CODE)"

      - name: Check and list files
        run: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== module.prop ==="
          cat module.prop

      - name: Ensure updateJson line exists in module.prop
        run: |
          if ! grep -q '^updateJson=' module.prop; then
            echo "updateJson=https://raw.githubusercontent.com/${{ github.repository }}/main/update.json" >> module.prop
          fi

      - name: Set executable permissions
        run: |
          [ -f "install.sh" ]    && chmod +x install.sh    || echo "install.sh not found"
          [ -f "uninstall.sh" ]  && chmod +x uninstall.sh  || echo "uninstall.sh not found"
          [ -d "META-INF" ]      && find META-INF -type f  $ -name "update-binary" -o -name "*.sh" $ -exec chmod +x {} \+
          [ -d "script" ]        && find script   -type f -name "*.sh" -exec chmod +x {} \+
          [ -d "common" ]        && find common   -type f -name "*.sh" -exec chmod +x {} \+
          [ -d "system" ]        && find system   -type f -exec chmod 644 {} \+

      - name: Generate update.json
        run: |
          cat << EOF > update.json
          {
            "version": "${{ env.MODULE_VERSION }}",
            "versionCode": ${{ env.MODULE_VERSION_CODE }},
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ env.MODULE_VERSION }}/VTEC_Unlimit_${{ env.MODULE_VERSION }}.zip",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/changelog.md"
          }
          EOF
          echo "=== update.json ==="
          cat update.json

      - name: Commit & push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update files for ${{ env.MODULE_VERSION }} [skip ci]"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Done
        run: |
          echo "âœ… Version ${{ env.MODULE_VERSION }} (code ${{ env.MODULE_VERSION_CODE }}) ready for release"
