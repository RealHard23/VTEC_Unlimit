name: Build & Release Magisk Module

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get tag version and set module details
        id: get_module_details
        run: |
          REF_NAME=${{ github.ref_name }}
          if [[ "$REF_NAME" =~ ^v([0-9.]+)$ ]]; then
            MODULE_VERSION="${BASH_REMATCH[1]}"
          else
            echo "::error::Invalid tag format. Expected 'vX.Y.Z'"
            exit 1
          fi
          
          # ใช้ versionCode ตามที่คุณระบุมา (44)
          MODULE_VERSION_CODE="44" # หรือคุณอาจจะให้ update.json ที่แก้ไขเองกำหนด versionCode ไปเลยก็ได้
          
          ZIP_FILE_NAME="VTEC_Unlimit_${TAG_NAME}.zip" # <--- **เปลี่ยน VTEC_Unlimit เป็นชื่อโมดูลของคุณ**
          
          echo "MODULE_VERSION=$MODULE_VERSION" >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$MODULE_VERSION_CODE" >> $GITHUB_ENV
          echo "TAG_NAME=$REF_NAME" >> $GITHUB_ENV
          echo "ZIP_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV
          
          echo "Detected Tag: $TAG_NAME"
          echo "Module Version: $MODULE_VERSION"
          echo "Module Version Code: $MODULE_VERSION_CODE"
          echo "Expected ZIP File Name: $ZIP_FILE_NAME"

      - name: Update module.prop # ยังคงอัปเดต module.prop ตาม tag
        run: |
          if [ ! -f "module.prop" ]; then
            echo "::error::module.prop not found! Please ensure it's in your repository root."
            exit 1
          fi
          sed -i "s/^version=.*/version=${{ env.MODULE_VERSION }}/" module.prop
          sed -i "s/^versionCode=.*/versionCode=${{ env.MODULE_VERSION_CODE }}/" module.prop
          echo "Updated module.prop content:"
          cat module.prop

      - name: Zip Magisk module # สร้าง ZIP file
        run: |
          echo "Zipping Magisk module into ${{ env.ZIP_FILE_NAME }}..."
          # **สำคัญ: ปรับ list ของไฟล์/โฟลเดอร์ในคำสั่ง zip ให้ตรงกับโครงสร้างโมดูลของคุณ**
          zip -r "${{ env.ZIP_FILE_NAME }}" . \
            -x ".git/*" ".github/*" "README.md" "LICENSE" \
            -x ".*" "__MACOSX" "*.DS_Store"
          echo "Successfully created ZIP: ${{ env.ZIP_FILE_NAME }}"

      # *** ลบขั้นตอน "Create / Update update.json" ออกไปเลย ***
      # - name: Create / Update update.json
      #   run: |
      #     ... (โค้ดสำหรับสร้าง update.json) ...

      - name: Commit updated module.prop and existing update.json # ขั้นตอนนี้จะ commit module.prop ที่ถูกแก้ไข และ update.json ที่คุณแก้ไขเอง
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add module.prop # เพิ่ม module.prop ที่ถูกแก้ไข
          # ตรวจสอบว่า update.json มีการเปลี่ยนแปลง (คุณแก้ไขเอง) แล้วเพิ่มเข้า staging
          # ถ้าคุณแก้ไข update.json แล้ว การ commit นี้จะรวมมันไปด้วย
          if [ -f "update.json" ]; then
            git add update.json
          fi
          
          # ตรวจสอบว่ามีไฟล์ที่ถูก staged ที่ต้อง commit หรือไม่
          if ! git diff-index --quiet HEAD; then
            echo "Committing changes..."
            git commit -m "Build: Update module.prop and update.json for ${{ env.TAG_NAME }} [skip ci]"
            git push
          else
            echo "No changes to commit for module.prop or update.json."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            New release of VTEC_Unlimit module.
            
            Version: ${{ env.MODULE_VERSION }}
            Version Code: ${{ env.MODULE_VERSION_CODE }}
            
            ---
            Please check update.json or module.prop for full changelog.
            
            Download: ${{ env.ZIP_FILE_NAME }}
          draft: false
          prerelease: false
          files: ${{ env.ZIP_FILE_NAME }}

      - name: Upload update.json to Release Assets # อัปโหลด update.json ที่คุณแก้ไขเอง ไปยัง Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: update.json

      - name: Complete job
        run: echo "Build and Release job completed successfully for ${{ env.TAG_NAME }}."
        
