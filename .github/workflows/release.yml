name: Build & Release Magisk Module

on:
  push:
    branches:
      - main # หรือ master หากคุณใช้ branch หลักชื่อ master
    tags: # เพิ่มเงื่อนไขนี้เพื่อทริกเกอร์ workflow เมื่อมีการ push tag (สำหรับสร้าง Release)
      - 'v*' # เช่น v1.0, v1.0.1, v2.0
  workflow_dispatch: # อนุญาตให้รัน workflow นี้ได้ด้วยตนเองจากหน้า GitHub

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ดึงประวัติทั้งหมด เพื่อให้ git tag ทำงานได้

      - name: Get current version from module.prop # อ่านเวอร์ชันจาก module.prop
        id: get_version
        run: |
          # อ่าน VERSION และ VERSION_CODE จาก module.prop
          # สมมติว่า module.prop อยู่ที่ root ของ repository
          MODULE_VERSION=$(grep "version=" module.prop | cut -d'=' -f2 | xargs)
          MODULE_VERSION_CODE=$(grep "versionCode=" module.prop | cut -d'=' -f2 | xargs)
          
          echo "Current Module Version: $MODULE_VERSION"
          echo "Current Module Version Code: $MODULE_VERSION_CODE"
          
          echo "MODULE_VERSION=$MODULE_VERSION" >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$MODULE_VERSION_CODE" >> $GITHUB_ENV
          
          # ตรวจสอบว่า workflow ถูกทริกเกอร์ด้วย tag หรือไม่
          # ถ้ามี tag ให้ใช้ tag เป็นชื่อ release version
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            RELEASE_TAG="${{ github.ref_name }}"
            echo "RELEASE_VERSION=$RELEASE_TAG" >> $GITHUB_ENV
            echo "Detected tag: $RELEASE_TAG"
          else
            # ถ้าไม่มี tag (เช่น push บน main หรือ manual dispatch) ให้ใช้เวอร์ชันจาก module.prop
            # คุณอาจจะต้องการใช้ format เช่น "v" + MODULE_VERSION สำหรับ tag ในอนาคต
            # หรืออาจจะข้ามการสร้าง Release ถ้าไม่ได้ push tag
            echo "RELEASE_VERSION=v$MODULE_VERSION-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV # เพิ่ม timestamp หากไม่มี tag
            echo "No tag detected. Using module.prop version with timestamp."
          fi

      - name: Zip Magisk module # บีบอัด Magisk module
        run: |
          echo "Zipping Magisk module..."
          # คำสั่ง zip ที่ถูกต้องสำหรับ Magisk Module
          # ควรบีบอัดไฟล์และโฟลเดอร์ทั้งหมดที่จำเป็นสำหรับโมดูลไปยัง root ของ zip
          # สมมติว่าไฟล์ module.prop, customize.sh, system/, common/, etc. อยู่ที่ root ของ repository
          # และคุณต้องการรวมไฟล์เหล่านี้ทั้งหมดใน zip
          # (ปรับคำสั่งนี้ตามโครงสร้างไฟล์จริงของ Magisk Module ใน repo ของคุณ)
          zip -r "VTEC_Unlimit_${{ env.RELEASE_VERSION }}.zip" . -x ".git/*" ".github/*" "*.DS_Store" "LICENSE" "*.md" # ไม่รวมไฟล์ที่ไม่จำเป็น
          echo "Successfully zipped Magisk module."

      - name: Create Release # สร้าง GitHub Release (สำคัญ!)
        id: create_release
        uses: softprops/action-gh-release@v2 # ใช้ Action สำหรับสร้าง GitHub Release
        if: startsWith(github.ref, 'refs/tags/') # รันขั้นตอนนี้เฉพาะเมื่อมีการ push tag เท่านั้น
        with:
          tag_name: ${{ github.ref_name }} # ใช้ชื่อ tag เป็นชื่อ Release
          name: VTEC_Unlimit ${{ github.ref_name }} # ชื่อที่แสดงบน Release
          body: |
            # Release Notes for VTEC_Unlimit ${{ github.ref_name }}
            
            Please refer to the changelog for details:
            https://raw.githubusercontent.com/RealHard23/VTEC_Unlimit/main/changelog.md
          draft: false # กำหนดเป็น true หากต้องการร่าง Release ก่อน
          prerelease: false # กำหนดเป็น true หากเป็นเวอร์ชัน Pre-release
          files: VTEC_Unlimit_${{ env.RELEASE_VERSION }}.zip # อัปโหลดไฟล์ MagiskModule.zip ไปยัง Release

      - name: Update update.json # อัปเดตไฟล์ update.json
        if: always() # ให้รันขั้นตอนนี้เสมอ ไม่ว่าจะมีการสร้าง Release หรือไม่
        run: |
          echo "Updating update.json..."
          # กำหนด URL ของ ZIP ให้ถูกต้อง
          # ถ้ามีการสร้าง Release (จาก tag), ใช้ URL ของ Release นั้น
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            RELEASE_ZIP_URL="https://github.com/RealHard23/VTEC_Unlimit/releases/download/${{ env.RELEASE_VERSION }}/VTEC_Unlimit_${{ env.RELEASE_VERSION }}.zip"
          else
            # ถ้าไม่มีการสร้าง Release (เช่น push บน main หรือ manual dispatch ที่ไม่มี tag),
            # ให้ใช้ URL ของ artifact หรือแจ้งเตือนว่าไม่มี Release URL
            # หรือจะข้ามการอัปเดต update.json ในกรณีนี้ไปเลยก็ได้ ขึ้นอยู่กับความต้องการ
            echo "Warning: No GitHub Release created. update.json might point to an incorrect URL or needs manual update."
            # สำหรับตอนนี้ เราจะยังคงใช้ Placeholder หรือจะทำอะไรบางอย่างหากไม่มี Release
            RELEASE_ZIP_URL="https://github.com/RealHard23/VTEC_Unlimit/raw/main/VTEC_Unlimit_${{ env.RELEASE_VERSION }}.zip" # URL สำหรับไฟล์บน main branch (ไม่แนะนำสำหรับ Release)
          fi
          
          cat << EOF > update.json
          {
            "version": "${{ env.MODULE_VERSION }}",
            "versionCode": "${{ env.MODULE_VERSION_CODE }}",
            "zipUrl": "$RELEASE_ZIP_URL",
            "changelog": "https://raw.githubusercontent.com/RealHard23/VTEC_Unlimit/main/changelog.md"
          }
          EOF
          echo "Successfully updated update.json."

      - name: Commit updated update.json # Commit การเปลี่ยนแปลงใน update.json และ push กลับไปที่ repo
        # ตรวจสอบว่ามีการเปลี่ยนแปลงใน update.json ก่อน commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add update.json
          
          # ตรวจสอบว่ามีอะไรต้อง commit หรือไม่ (เช่น update.json มีการเปลี่ยนแปลง)
          if ! git diff-index --quiet HEAD -- update.json; then
            echo "Committing update.json..."
            git commit -m "Update update.json for ${{ env.MODULE_VERSION }} [skip ci]"
            git push
          else
            echo "No changes in update.json. Skipping commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete job
        run: echo "Build and Release job completed successfully."

