name: Build & Release Magisk Module # ชื่อของ Workflow

on:
  push:
    tags: # จะรัน workflow นี้เมื่อมีการ push tag เท่านั้น
      - 'v*' # ตัวอย่าง: 'v1.0.0', 'v4.2', 'vX.Y.Z'
  workflow_dispatch: # อนุญาตให้รัน workflow นี้ได้ด้วยตนเองจากหน้า GitHub

jobs:
  build: # ชื่อของ Job นี้
    runs-on: ubuntu-latest # รันบนระบบปฏิบัติการ Ubuntu เวอร์ชันล่าสุด

    steps:
      - name: Checkout repository # ตรวจสอบ repository
        uses: actions/checkout@v4

      - name: Get tag version # ดึงชื่อ tag ออกมาและแยกเวอร์ชัน
        id: get_version
        run: |
          REF_NAME=${{ github.ref_name }} # ตัวอย่าง: "v4.2"
          
          # ตรวจสอบรูปแบบ tag ที่ขึ้นต้นด้วย 'v' ตามด้วยตัวเลขและจุด
          if [[ "$REF_NAME" =~ ^v([0-9.]+)$ ]]; then
            MODULE_VERSION="${BASH_REMATCH[1]}" # จะได้ "4.2"
          else
            echo "::error::Invalid tag format. Expected 'vX.Y.Z'"
            exit 1
          fi
          
          # แปลงเวอร์ชัน (เช่น '4.2') เป็น versionCode (เช่น '402' หรือ '42')
          # Magisk Modules มักใช้ versionCode เป็นตัวเลขจำนวนเต็ม
          # ตัวอย่าง: '4.2' -> '402'
          MODULE_VERSION_CODE=$(echo "$MODULE_VERSION" | sed 's/\.//g')
          
          echo "MODULE_VERSION=$MODULE_VERSION" >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$MODULE_VERSION_CODE" >> $GITHUB_ENV
          echo "TAG_NAME=$REF_NAME" >> $GITHUB_ENV # เก็บชื่อ tag เต็ม (เช่น v4.2)
          
          echo "Detected Tag: $TAG_NAME"
          echo "Module Version: $MODULE_VERSION"
          echo "Module Version Code: $MODULE_VERSION_CODE"

      - name: Update module.prop # อัปเดตไฟล์ module.prop ใน Magisk Module
        run: |
          # ตรวจสอบว่าไฟล์ module.prop มีอยู่จริง
          if [ ! -f "module.prop" ]; then
            echo "::error::module.prop not found! Please ensure it's in your repository root."
            exit 1
          fi
          
          # อัปเดต 'version' และ 'versionCode' ใน module.prop
          # ใช้ sed เพื่อค้นหาและแทนที่ข้อความ
          sed -i "s/^version=.*/version=${{ env.MODULE_VERSION }}/" module.prop
          sed -i "s/^versionCode=.*/versionCode=${{ env.MODULE_VERSION_CODE }}/" module.prop
          
          echo "Updated module.prop content:"
          cat module.prop # แสดงเนื้อหาที่อัปเดตแล้วใน log

      - name: Zip Magisk module # บีบอัด Magisk module เป็นไฟล์ ZIP
        run: |
          echo "Zipping Magisk module..."
          
          # กำหนดชื่อไฟล์ ZIP ที่จะสร้าง (ตัวอย่าง: VTEC_Unlimit-4.2.zip)
          ZIP_NAME="VTEC_Unlimit-${{ env.MODULE_VERSION }}.zip" # <--- **เปลี่ยน VTEC_Unlimit เป็นชื่อโมดูลของคุณ**
          
          # คำสั่ง zip: บีบอัดไฟล์และโฟลเดอร์ทั้งหมดใน root directory
          # ยกเว้นโฟลเดอร์ .git, .github และไฟล์ที่ไม่อยากรวม (เช่น README.md, LICENSE)
          # **สำคัญ: ปรับ list ของไฟล์/โฟลเดอร์ในคำสั่ง zip ให้ตรงกับโครงสร้างโมดูลของคุณ**
          # ตัวอย่าง: ถ้า module.prop และ script ต่างๆ อยู่ใน root ให้ใช้ .
          # ถ้าโมดูลอยู่ในโฟลเดอร์ย่อย เช่น 'my-magisk-module/' ให้เปลี่ยนเป็น 'my-magisk-module/'
          zip -r "$ZIP_NAME" . \
            -x ".git/*" ".github/*" "README.md" "LICENSE" \
            -x ".*" "__MACOSX" "*.DS_Store" # เพิ่มไฟล์หรือโฟลเดอร์ที่ไม่ต้องการเข้าไปใน zip
          
          echo "Successfully created ZIP: $ZIP_NAME"
          echo "ZIP_FILE_NAME=$ZIP_NAME" >> $GITHUB_ENV # เก็บชื่อไฟล์ ZIP ไว้ใช้ในขั้นตอนถัดไป

      - name: Create / Update update.json # สร้างหรืออัปเดตไฟล์ update.json
        run: |
          echo "Generating update.json..."
          
          OWNER="${{ github.repository_owner }}" # ชื่อผู้ใช้/องค์กรเจ้าของ Repo
          REPO_NAME="${{ github.event.repository.name }}" # ชื่อ Repository
          
          # URL สำหรับดาวน์โหลดไฟล์ ZIP จาก GitHub Release
          DOWNLOAD_URL="https://github.com/${OWNER}/${REPO_NAME}/releases/download/${{ env.TAG_NAME }}/${{ env.ZIP_FILE_NAME }}"
          
          # ดึง changelog จากไฟล์ CHANGELOG.md (ถ้ามี)
          CHANGELOG_CONTENT=""
          if [ -f "CHANGELOG.md" ]; then
            # อ่านไฟล์ CHANGELOG.md และแปลงให้เป็น String ที่ถูกต้องสำหรับ JSON
            # ใช้ sed -z เพื่อให้ sed อ่านไฟล์ทั้งหมดเป็นบรรทัดเดียว (แก้ปัญหา newline)
            # จากนั้นแทนที่ newline ด้วย \n และ double quotes ด้วย \"
            CHANGELOG_CONTENT=$(cat CHANGELOG.md | sed -z 's/\n/\\n/g' | sed 's/"/\\"/g')
          else
            CHANGELOG_CONTENT="Updated to version ${{ env.MODULE_VERSION }}." # ข้อความเริ่มต้นถ้าไม่มี CHANGELOG.md
          fi
          
          # สร้างไฟล์ update.json ด้วยเนื้อหา JSON
          cat > update.json <<EOF
{
  "version": "${{ env.MODULE_VERSION }}",
  "versionCode": "${{ env.MODULE_VERSION_CODE }}",
  "changelog": "${CHANGELOG_CONTENT}",
  "url": "${DOWNLOAD_URL}"
}
EOF
          echo "Generated update.json content:"
          cat update.json

      - name: Commit updated module.prop and update.json # Commit การเปลี่ยนแปลง (ถ้ามี)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # เพิ่มไฟล์ module.prop และ update.json เข้า staging area
          git add module.prop update.json
          
          # ตรวจสอบว่ามีไฟล์ที่ถูก staged ที่ต้อง commit หรือไม่
          # ถ้ามี (git diff-index คืนค่าไม่เป็น 0) จะทำการ commit และ push
          if ! git diff-index --quiet HEAD; then
            echo "Committing changes..."
            git commit -m "Build: Update module.prop and update.json for ${{ env.TAG_NAME }} [skip ci]"
            git push
          else
            echo "No changes to commit for module.prop or update.json."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # ต้องมี Token สำหรับการ push

      - name: Create GitHub Release # สร้าง GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1 # ใช้ Action สำหรับสร้าง Release
        with:
          tag_name: ${{ env.TAG_NAME }} # ใช้ชื่อ tag ที่ดึงมา (เช่น v4.2)
          name: Release ${{ env.TAG_NAME }} # ชื่อของ Release ใน GitHub
          body: | # รายละเอียดของ Release
            New release of VTEC_Unlimit module.
            
            Version: ${{ env.MODULE_VERSION }}
            Version Code: ${{ env.MODULE_VERSION_CODE }}
            
            ---
            **Changelog:**
            ${{ env.CHANGELOG_CONTENT }} # หากคุณต้องการให้ Changelog แสดงใน Release
            
            ---
            Download: ${{ env.DOWNLOAD_URL }}
          draft: false # ตั้งเป็น false เพื่อให้ release เป็น public ทันที
          prerelease: false # ตั้งเป็น true ถ้าเป็น pre-release (ตัวอย่าง: v4.2-beta)
          files: ${{ env.ZIP_FILE_NAME }} # อัปโหลดไฟล์ ZIP ที่สร้างไว้เป็น asset หลัก

      - name: Upload update.json to Release Assets # อัปโหลดไฟล์ update.json ไปยัง Release (เป็น Asset เพิ่มเติม)
        # ขั้นตอนนี้จะทำงานต่อเมื่อการสร้าง Release สำเร็จ
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: update.json # อัปโหลด update.json เป็น asset เพิ่มเติมใน Release เดียวกัน
          # ไม่ต้องระบุ body หรือ name อีก เพราะมันจะเพิ่มไฟล์เข้าไปใน release ที่มีอยู่แล้ว

      - name: Complete job
        run: echo "Build and Release job completed successfully for ${{ env.TAG_NAME }}."
